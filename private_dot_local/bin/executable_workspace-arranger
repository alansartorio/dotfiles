#!/usr/bin/env rust-script
//! Dependencies can be specified in the script file itself as follows:
//!
//! ```cargo
//! [dependencies]
//! serde_json = "1.0"
//! serde = { version = "1.0.219", features = ["derive"] }
//! anyhow = "*"
//! ```
#![feature(exit_status_error)]

use anyhow::Result;
use serde::{Deserialize, Serialize};
use std::process::Command;

#[derive(Debug, Serialize, Deserialize)]
struct Monitor {
    name: String,
    id: u32,
}

#[derive(Debug, Serialize, Deserialize)]
struct Arrangement {
    monitor: Monitor,
    workspaces: Vec<u32>
}


fn get_monitors() -> Result<Vec<Monitor>> {
    let monitors_output = Command::new("hyprctl").arg("monitors").arg("-j").output()?;
    monitors_output.status.exit_ok()?;
    let monitors_str = String::from_utf8(monitors_output.stdout)?;
    let monitors = serde_json::from_str(&monitors_str)?;
    Ok(monitors)
}

const TOTAL_WORKSPACE_AMOUNT: u32 = 10;

fn main() {
    let mut arrangements: Vec<Arrangement> = vec![];
    let monitors = get_monitors().unwrap();
    let mut monitor_count = monitors.len() as u32;
    let mut workspace_amount: u32 = TOTAL_WORKSPACE_AMOUNT;

    for monitor in monitors {
        let workspaces_in_monitor = workspace_amount / monitor_count;
        arrangements.push(Arrangement {
            monitor,
            workspaces: (0u32..workspaces_in_monitor).map(|n| n + TOTAL_WORKSPACE_AMOUNT - workspace_amount + 1).collect()
        });
        workspace_amount -= workspaces_in_monitor;
        monitor_count -= 1;
    }

    let out = serde_json::to_string(&arrangements).unwrap();

    println!("{out}");
}
