(defvar day "0")
(defvar month "0")
(defvar year "0")


(defwidget bar []
  (centerbox :class "bar" :orientation "h"
    (workspaces)
    (center)
    (sidestuff)))

(defwidget center []
  (clock)
  )

(defwidget battery [id]
  (box
    :class "battery-container"
    (box :class "battery-container-inner"
      (label
              :text "${round((EWW_BATTERY[id].capacity), 0)}% ${EWW_BATTERY[id].status}"
    ))))

(defwidget clock []
  (button :class "clock" :valign "baseline" :onclick "scripts/popup_calendar"
    (box :space-evenly false
      (box :class "clock-time" (label :text time))
      (box :class "clock-date" (label :text date))
      )
    )
  )


;; Calendar window
(defwindow calendar
  :monitor 0
  :geometry 
    (geometry 
      :x "43%"
      :y "20px"
      :width "14%"
      :height "100px")
  (box
    :class "calendar"
    :orientation "h"
    :valign "fill"
    :halign "fill"
    (calendar
      :day day
      :month month
      :year year
      :show-details "true"
      :show-heading "true"
      :show-day-names "true")
    )
)

;(defwidget keyboard [] 
    ;(box
      ;:orientation "v"
      ;:space-evenly false
      ;:valign "fill"
      ;:halign "center"
      ;(eventbox 
        ;:cursor "pointer"
        ;:tooltip "Change layout to US english"
        ;(button
          ;:onclick "scripts/kb_layouts set us"
          ;:valign "center"
          ;"US"))
      ;(box :vexpand true :class "layout-separator")
      ;(eventbox
        ;:cursor "pointer"
        ;:tooltip "Change layout to US spanish"
        ;(button
          ;:onclick "scripts/kb_layouts set es"
          ;:valign "center"
          ;"ES")
          ;)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label {volume.mute ? "Û∞ñÅ" : "Û∞ïæ"}
            :value {volume.volume}
            :onscroll "pactl set-sink-volume @DEFAULT_SINK@ $(test {} = up && printf + || printf -)1%"
            :onclick "amixer {{if not .is_vm}}-D pulse{{end}} set Master toggle"
            :onrightclick "pavucontrol &")
    {{- if .hass}}
    (metric :label {hass-lamp.state == "loading" || hass-lamp.type == "loading" ? "Û∞áò" : hass-lamp.state == "off" ? "Û∞πê" : hass-lamp.type == "brightness" ? "Û∞õ®" : "Û∞îè"}
            :value {hass-lamp.value ?: 0}
            :onscroll "socat -u - UNIX-SENDTO:/tmp/hass-light.sock <<< $(test {} = up && printf increase || printf decrease)"
            :onclick "socat -u - UNIX-SENDTO:/tmp/hass-light.sock <<< toggle_state"
            :onrightclick "socat -u - UNIX-SENDTO:/tmp/hass-light.sock <<< toggle_mode")
    {{- end}}
    (metric :label "Û∞çõ"
            :value {EWW_RAM.used_mem_perc})
    (metric :label "Û±êñ"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)})
    {{- if .battery}}
    (battery :id "BAT0")
    {{- end}}
    ;(keyboard)
  )
)

{{- if .hass}}
(deflisten hass-lamp :initial '{"state":"loading"}' "socat -u UNIX-CLIENT:/tmp/hass-light-eww-output.sock -")
{{- end}}

(deflisten workspaces :initial "[]" "bash scripts/get-workspaces $MONITOR")
(deflisten current_workspace :initial "[1]" "bash scripts/get-active-workspace $MONITOR_ID")
(defwidget workspaces []
    (eventbox :onscroll "bash scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
      (box :halign "start" :space-evenly true
        (label :text "${workspaces}${current_workspace}" :visible false)
        (for workspace in workspaces
          (eventbox :cursor "pointer" :onclick "hyprctl dispatch workspace ${workspace.id}"
            (box 
              :valign "center" 
              :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
              (label :text "${workspace.id}")
              )
            )
          )
        )
      )
  )

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "üéµ${music}" : ""}))


(defwidget metric [label value ?onscroll ?onclick ?onrightclick]
  (box :style "margin: 0 6px"
    (eventbox :onscroll onscroll
      (overlay
        (circular-progress :width 30 :class "circular-indicator" :value "${value <= 100 ? value : 100}" :thickness 3)
        (button :class "label" :onclick onclick :onrightclick onrightclick label)
        ;(scale :min 0
               ;:max 101
               ;:active {onchange != ""}
               ;:value value
               ;:onchange onchange)
      ))))



(deflisten music :initial ""
  "playerctl --follow metadata --format {{"'{{ artist }} - {{ title }}'"}} || true")

(deflisten volume :initial "{\"volume\": 0, \"mute\": false}"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M'")

(defpoll date :interval "10s"
  "date '+%b %d, %Y'")

(defwindow main-bar
  :monitor {{if .desktop_monitors}}1{{else}}0{{end}}
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "10px"
                      :anchor "top center")
  :exclusive true
  (bar))

{{- if .desktop_monitors}}
(defwindow secondary-bar
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "30px"
                      :anchor "top center")
  :exclusive true
  (bar))
{{- end}}
